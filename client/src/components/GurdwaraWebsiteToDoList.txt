Gurdwara Website -> TO-DO List:
  -  Change homePage table to display: grid
  -  Components:
        -  header
	-  footer
	-  login form:
		-  secure password check
	-  slideshow
	-  schedule
  -  Google Maps API
  -  DATE & TIME API
  -  ALL stylesheet should include media query
  -  clean up styling


sites:
https://www.youtube.com/watch?v=ZKwrOXl5TDI&list=PL55RiY5tL51oGJorjEgl6NVeDbx_fO5jR&index=15
https://github.com/mschwarzmueller/nodejs-basics-tutorial/blob/master/09-mongodb/routes/index.js
https://www.w3schools.com/nodejs/nodejs_mysql_delete.asp
https://www.youtube.com/watch?v=hGZX_SA7lYg
https://www.codecademy.com/articles/tdd-setup-mongodb


schedule API
https://www.youtube.com/watch?v=ClbeCRG2KR4
documentation: https://www.mindfusion.eu/onlinehelp/scheduler.javascript/index.htm

stuff i had to delete
"start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
navbar style: https://www.youtube.com/watch?v=LOWjWRy_Kks

INSERT INTO `events` (`id`, `date`, `event`) VALUES (NULL, 'February 1, 2019', 'Testing'), (NULL, 'February 2, 2019', ''), (NULL, 'February 3, 2019', ''), (NULL, 'February 4, 2019', ''), (NULL, 'February 5, 2019', ''), (NULL, 'February 6, 2019', ''), (NULL, 'February 7, 2019', ''), (NULL, 'February 8, 2019', ''), (NULL, 'February 9, 2019', ''), (NULL, 'February 10, 2019', ''), (NULL, 'February 11, 2019', ''), (NULL, 'February 12, 2019', ''), (NULL, 'February 13, 2019', ''), (NULL, 'February 14, 2019', ''), (NULL, 'February 15, 2019', ''), (NULL, 'February 16, 2019', ''), (NULL, 'February 17, 2019', ''), (NULL, 'February 18, 2019', ''), (NULL, 'February 19, 2019', ''), (NULL, 'February 20, 2019', ''), (NULL, 'February 21, 2019', ''), (NULL, 'February 22, 2019', ''), (NULL, 'February 23, 2019', ''), (NULL, 'February 24, 2019', ''), (NULL, 'February 25, 2019', ''), (NULL, 'February 26, 2019', ''), (NULL, 'February 27, 2019', ''), (NULL, 'February 28, 2019', '')

Godly Videos:
https://www.youtube.com/watch?v=8bNlffXEcC0
https://www.youtube.com/watch?v=EN6Dx22cPRI
https://www.youtube.com/watch?v=s1swJLYxLAA
https://github.com/noobcoder1137/Todo_Rest_CRUD_Application_JQuery_FetchAPI/blob/master/index.html


in order to host website on external server use heroku
https://medium.freecodecamp.org/how-to-deploy-a-react-app-with-an-express-server-on-heroku-32244fe5a250

Something about IP address:
https://www.inmotionhosting.com/support/website/databases/setting-up-a-remote-mysql-connection-in-cpanel

Include binary searching when looking for username
Remove loginstatus column
remove extra index.js.css logo loginPage.js

Extra code:
// INITIAL fetch statements
// fetch('/users')
//     .then(res => res.json())
//     .then(users => this.setState({ users }));
// fetch('/users/createdb')
//   .then(res => res.json())
//   .then(message => this.setState({ message }));
// fetch('/users/createeventstable')
//     .then(res => res.json())
//     .then(message => this.setState({ message }));

// // INITIAL create database
// router.get('/createdb', (req, res, next) => {
//   let sql = 'CREATE DATABASE schedule';
//   db.query(sql, (err, result) => {
//     if(err) throw err;
//     console.log(result);
//     res.send('Database created...');
//   });
// });
//
// // INITIAL create table
// router.get('/createeventstable', (req, res, next) => {
//   let sql = 'CREATE TABLE events(id int AUTO_INCREMENT, date VARCHAR(255), event VARCHAR(255), PRIMARY KEY (id))';
//   db.query(sql, (err, result) => {
//     if(err) throw err;
//     console.log(result);
//     res.send('Events table created...');
//   });
// });


/*
function test1() {
  return new Promise((resolve, reject) => {
    db.query(sql_2, (err, result) => {
      if(err) {
         reject(err);
      } else {
        // console.log('Login Status = 1');
        // console.log(result);
        loginStatus = true;
        // console.log("Before Send!");
        // console.log(loginStatus);
        // await res.json(loginStatus);
        resolve(loginStatus);
      }
    });
    // console.log('runnnnning');
  });
}

async function test2() {
  return await test1();
}

// SEARCH all logins data for user authentication
router.get('/login', (req, res, next) => {
  let sql_1 = 'SELECT * FROM logins';
  // let loginStatus = false;
  let query_1 = new Promise((resolve, reject) => {
    db.query(sql_1, (err, result) => {
      if(err) {
        reject(err);
      } else {
        resolve(result);
      }
    });
  });
  query_1.then(result => {
    // console.log('go promises!');
    // res.json('working!!!')
    let loginStatus = false;
    for(let row in result) {
      if(result[row].username === req.query.username && result[row].passcode === req.query.password) {
        let sql_2 = `UPDATE logins SET loginStatus = '${1}' WHERE id = ${result[row].id}`;
        let query_2 = test2();
        query_2.then(status => {
          console.log('yes, resolved')
          res.json(status);
        }, err => res.status(404).send);
        // console.log(result[row].username);
        // console.log(result[row].passcode);
        // console.log(req.query.username);
        // console.log(req.query.password);
        // console.log(result[row].username === req.query.username);
        // console.log(result[row].passcode === req.query.password);
        // console.log(loginStatus);
      }
    }
    // let query_3 = new Promise((resolve, reject) => {
    //   if(!loginStatus) {
    //     resolve(loginStatus);
    //   } else {
    //     reject('Error');
    //   }
    // });
  //   query_3.then(status => res.json(status));
  // }, err => res.status(404).send);

  // console.log(loginStatus);
  // if(!loginStatus) {
    // res.json(loginStatus);
  // }
});
});
// SEARCH all logins data for user authentication
/*router.get('/login', (req, res, next) => {
  let sql_1 = 'SELECT * FROM logins';
  let query_1 = db.query(sql_1, (err, result) => {
    if(err) {
      throw err;
    } else {
      console.log(result);
      return result;
    }
  });
  console.log(query_1);
  .then(result => {
    console.log(result);
    let loginStatus = false;
    for(let row in result) {
      if(result[row].username === req.query.username && result[row].passcode === req.query.password) {
        let sql_2 = `UPDATE logins SET loginStatus = '${1}' WHERE id = ${result[row].id}`;
        let query_2 = db.query(sql_2, (err, result) => {
          if(err) {
            throw err;
          } else {
            loginStatus = true;
          }
        });
      }
    }
    return loginStatus;
  }).then(loginStatus => res.json(loginStatus));
});*/


// BINARY SEARCH all logins data for user authentication
// router.get('/login', (req, res, next) => {
//   let sql_1 = 'SELECT * FROM logins';
//   let loginStatus = false;
//   let query_1 = db.query(sql_1, (err, result) => {
//     if(err) {
//       throw err;
//     } else {
//       let m = 0
//       // binary searching
//       let lo = 0;
//       let hi = Object.keys(result).length - 1;
//       while (hi >= lo) {
//         // prevent overflow
//         let m = Math.floor(lo + (hi - lo) / 2);
//         // if match found
//         if(result[m.toString()].username === req.query.username && result[m.toString()].passcode === req.query.password) {
//           let sql_2 = `UPDATE logins SET loginStatus = '${1}' WHERE id = ${result[m.toString()].id}`;
//           let query_2 = db.query(sql_2, (err, result2) => {
//             if(err) {
//               throw err;
//             } else {
//               console.log('Login Status = 1');
//               console.log(result2);
//               res.json(result[m.toString()].id);
//             }
//           });
//           loginStatus = true;
//           break;
//         }
//         // Incorrect Password
//         else if(result[m.toString()].username === req.query.username) {
//           break;
//         }
//         // Continue to find match...
//         else if(result[m.toString()].username > req.query.username) {
//           lo = m + 1;
//         }
//         else if(result[m.toString()].username < req.query.username) {
//           hi = m - 1;
//         }
//       }
//       // if no match is found
//       if(!loginStatus) {
//         res.json(null);
//       }
//     }
//   });
// });

// postgres code: https://www.youtube.com/watch?v=NX3jqtwfzVY
const express = require('express');
const router = express.Router();
// const mysql = require('mysql');
const Pool = require('pg').Pool;
const bcrypt = require('bcryptjs');

// initalize connection
// const db = mysql.createConnection({
//   host: 'localhost',
//   user: 'root',
//   database: 'gurdwaradatabase'
// });
const config = {
    host: 'localhost',
    user: 'postgres',
    password: 'sam123',
    database: 'gurdwaradatabase'
};
const db = new Pool(config);
if(db) {
  console.log('PostgreSQL connected...');
}
// connection to database
// db.connect((err) => {
//   if(err) {
//     throw err;
//   }
//   console.log('Mysql connected...');
// });

// UPDATE event
router.get('/update-event', (req, res, next) => {
  let sql = '';
  let i_string = '';
  let success = false;
  console.log(req.query.array);
  console.log(Object.keys(req.query.array).length);
  for(let i = 0; i < Object.keys(req.query.array).length; i++) {
    i_string = i.toString();
    sql = `UPDATE events SET event = '${req.query.array[i_string].text}' WHERE id = ${Number(req.query.array[i_string].id)} `;
    console.log(Number(req.query.array[i_string].id));
    let query = db.query(sql, (err, result) => {
      console.log(result);
      if(err) {
        throw err;
        console.log('Update Event Error...');
      } else {
        console.log(sql);
        console.log('Program Schedule Updated...');
      }
    });
  }
  res.json('Thank you for updating Program Schedule!');
});

// GET all events data for displaying purposes
router.get('/', (req, res, next) => {
  let sql = 'SELECT * FROM events';
  let query = db.query(sql, (err, result) => {
    if(err) {
      throw err;
    } else {
      console.log("Calendar Data Sent...");
      console.log(result.rows);
      res.json(result.rows);
    }
  });
});

// temparary password hashing for registeration
router.post("/register", (req, res, next) => {
  let sql_1 = `SELECT * FROM logins WHERE username='${req.query.username}'`;
  let query_1 = db.query(sql_1, (err, result_1) => {
    if(err) {
      throw err;
    } else {
      result_1 = result_1.rows;
      if(!(result_1.length)) {
        let sql_2 = `INSERT INTO logins (username, passcode, loginstatus) VALUES ('${req.query.username}', '${req.query.hash}', '${0}')`;
        let query_2 = db.query(sql_2, (err, result_2) => {
          if(err) {
            throw err;
            res.json(null);
          } else {
            console.log("New Registeration...");
            let sql_3 = `UPDATE logins SET loginstatus = '${1}' WHERE id = ${result_2.insertId}`;
            let query_3 = db.query(sql_3, (err, result_3) => {
              if(err) {
                throw err;
              } else {
                console.log("Authenication Successful...");
                res.send(result_2.insertId.toString());
              }
            });
          }
        });
      } else {
        console.log("Registeration Failed... User Already Exits...");
        res.json(null);
      }
    }
  })
});

// Authenicate User
router.get('/login', (req, res, next) => {
  let sql_1 = `SELECT * FROM logins WHERE username='${req.query.username}'`;
  let query_1 = db.query(sql_1, (err, result) => {
    if(err) {
      throw err;
    } else {
      result = result.rows;
      if(result.length) {
        bcrypt.compare(req.query.password, result[0].passcode, (err, p_result) => {
          if(p_result) {
            let sql_2 = `UPDATE logins SET loginstatus = '${1}' WHERE id = ${result[0].id}`;
            let query_2 = db.query(sql_2, (err, result_2) => {
              if(err) {
                throw err;
              } else {
                console.log("Authenication Successful...");
                res.send(result[0].id.toString());
              }
            });
          } else {
            console.log("Authenication Failed...");
            res.json(null);
          }
        });
      } else {
        console.log("Authenication Failed...");
        res.json(null);
      }
    }
  });
});

// CHECK is a user is signed in or not
router.get('/login-status', (req, res, next) => {
  let sql = `SELECT * FROM logins WHERE id=${req.query.id}`;
  let query = db.query(sql, (err, result) => {
    result = result.rows;
    console.log(result[0]);
    console.log(result[0].loginstatus);
    if(err) {
      throw err;
      res.json(false);
    } else {
      if(!result[0]) {
        console.log("No User Signed In...");
        res.json(false);
      } else if(result[0].loginstatus) {
        console.log("User is currently signed in...");
        res.json(true);
      } else {
        console.log("No User Signed In...");
        res.json(false);
      }
    }
  });
});

// Sign User out by changing login status
router.get('/update-login-status', (req, res, next) => {
  sql = `UPDATE logins SET loginstatus = '${0}' WHERE id = ${req.query.id} `;
  let query = db.query(sql, (err, result) => {
    if(err) {
      throw err;
    } else {
      console.log("Logged out...");
      res.send("User logged out.");
    }
  });
});

module.exports = router;
